{"/home/travis/build/npmtest/node-npmtest-replay/test.js":"/* istanbul instrument in package npmtest_replay */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-replay/lib.npmtest_replay.js":"/* istanbul instrument in package npmtest_replay */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_replay = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_replay = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-replay/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-replay && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_replay */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_replay\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_replay.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_replay.rollup.js'] =\n            local.assetsDict['/assets.npmtest_replay.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_replay.__dirname + '/lib.npmtest_replay.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-replay/node_modules/replay/lib/index.js":"'use strict';\n\n// The Replay module holds global configution properties and methods.\n\n\nconst Catalog = require('./catalog');\nconst Chain = require('./chain');\nconst debug = require('./debug');\n\nvar _require = require('events');\n\nconst EventEmitter = _require.EventEmitter;\n\nconst logger = require('./logger');\nconst passThrough = require('./pass_through');\nconst recorder = require('./recorder');\n\n// Supported modes\nconst MODES = [\n// Allow outbound HTTP requests, don't replay anything.  Use this to test your\n// code against changes to 3rd party API.\n'bloody',\n\n// Allow outbound HTTP requests, replay captured responses.  This mode is\n// particularly useful when new code makes new requests, but unstable yet and\n// you don't want these requests saved.\n'cheat',\n\n// Allow outbound HTTP requests, capture responses for future replay.  This\n// mode allows you to capture and record new requests, e.g. when adding tests\n// or making code changes.\n'record',\n\n// Do not allow outbound HTTP requests, replay captured responses.  This is\n// the default mode and the one most useful for running tests\n'replay'];\n\n// This is the standard mode for running tests\nconst DEFAULT_MODE = 'replay';\n\n// Headers that are recorded/matched during replay.\nconst MATCH_HEADERS = [/^accept/, /^authorization/, /^body/, /^content-type/, /^host/, /^if-/, /^x-/];\n\n// Instance properties:\n//\n// catalog   - The catalog is responsible for loading pre-recorded responses\n//             into memory, from where they can be replayed, and storing captured responses.\n//\n// chain     - The proxy chain.  Essentially an array of handlers through which\n//             each request goes, and concludes when the last handler returns a\n//             response.\n//\n// headers   - Only these headers are matched when recording/replaying.  A list\n//             of regular expressions.\n//\n// fixtures  - Main directory for replay fixtures.\n//\n// mode      - The mode we're running in, see MODES.\nclass Replay extends EventEmitter {\n\n  constructor(mode) {\n    if (!~MODES.indexOf(mode)) throw new Error(`Unsupported mode '${ mode }', must be one of ${ MODES.join(', ') }.`);\n\n    super();\n    this.mode = mode;\n    this.chain = new Chain();\n\n    // Localhost servers: pass request to localhost\n    this._localhosts = new Set(['localhost', '127.0.0.1', '::1']);\n    // Pass through requests to these servers\n    this._passThrough = new Set();\n    // Dropp connections to these servers\n    this._dropped = new Set();\n\n    this.catalog = new Catalog(this);\n    this.headers = MATCH_HEADERS;\n\n    // Automatically emit connection errors and such, also prevent process from crashing\n    this.on('error', function (error) {\n      debug(`Replay: ${ error.message || error }`);\n    });\n  }\n\n  // Addes a proxy to the beginning of the processing chain, so it executes ahead of any existing proxy.\n  //\n  // Example\n  //     replay.use(replay.logger())\n  use(proxy) {\n    this.chain.prepend(proxy);\n    return this;\n  }\n\n  // Pass through all requests to these hosts\n  passThrough() {\n    for (var _len = arguments.length, hosts = Array(_len), _key = 0; _key < _len; _key++) {\n      hosts[_key] = arguments[_key];\n    }\n\n    this.reset.apply(this, hosts);\n    for (let host of hosts) this._passThrough.add(host);\n    return this;\n  }\n\n  // True to pass through requests to this host\n  isPassThrough(host) {\n    const domain = host.replace(/^[^.]+/, '*');\n    return !!(this._passThrough.has(host) || this._passThrough.has(domain) || this._passThrough.has(`*.${ host }`));\n  }\n\n  // Do not allow network access to these hosts (drop connection)\n  drop() {\n    for (var _len2 = arguments.length, hosts = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      hosts[_key2] = arguments[_key2];\n    }\n\n    this.reset.apply(this, hosts);\n    for (let host of hosts) this._dropped.add(host);\n    return this;\n  }\n\n  // True if this host is on the dropped list\n  isDropped(host) {\n    const domain = host.replace(/^[^.]+/, '*');\n    return !!(this._dropped.has(host) || this._dropped.has(domain) || this._dropped.has(`*.${ host }`));\n  }\n\n  // Treats this host as localhost: requests are routed directly to 127.0.0.1, no\n  // replay.  Useful when you want to send requests to the test server using its\n  // production host name.\n  localhost() {\n    for (var _len3 = arguments.length, hosts = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      hosts[_key3] = arguments[_key3];\n    }\n\n    this.reset.apply(this, hosts);\n    for (let host of hosts) this._localhosts.add(host);\n    return this;\n  }\n\n  // True if this host should be treated as localhost.\n  isLocalhost(host) {\n    const domain = host.replace(/^[^.]+/, '*');\n    return !!(this._localhosts.has(host) || this._localhosts.has(domain) || this._localhosts.has(`*.${ host }`));\n  }\n\n  // Use this when you want to exclude host from dropped/pass-through/localhost\n  reset() {\n    for (var _len4 = arguments.length, hosts = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      hosts[_key4] = arguments[_key4];\n    }\n\n    for (let host of hosts) {\n      this._localhosts.delete(host);\n      this._passThrough.delete(host);\n      this._dropped.delete(host);\n    }\n    return this;\n  }\n\n  get fixtures() {\n    return this.catalog.getFixturesDir();\n  }\n\n  set fixtures(dir) {\n    // Clears loaded fixtures, and updates to new dir\n    this.catalog.setFixturesDir(dir);\n  }\n\n}\n\nconst replay = new Replay(process.env.REPLAY || DEFAULT_MODE);\n\nfunction passWhenBloodyOrCheat(request) {\n  return replay.isPassThrough(request.url.hostname) || replay.mode === 'cheat' && !replay.isDropped(request.url.hostname);\n}\n\nfunction passToLocalhost(request) {\n  return replay.isLocalhost(request.url.hostname) || replay.mode === 'bloody';\n}\n\n// The default processing chain (from first to last):\n// - Pass through requests to localhost\n// - Log request to console is `deubg` is true\n// - Replay recorded responses\n// - Pass through requests in bloody and cheat modes\nreplay.use(passThrough(passWhenBloodyOrCheat)).use(recorder(replay)).use(logger(replay)).use(passThrough(passToLocalhost));\n\nmodule.exports = replay;\n\n// These must come last since they need module.exports to exist\nrequire('./patch_http_request');\nrequire('./patch_dns_lookup');\n//# sourceMappingURL=index.js.map\n","/home/travis/build/npmtest/node-npmtest-replay/node_modules/replay/lib/catalog.js":"'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nconst assert = require('assert');\nconst debug = require('./debug');\nconst File = require('fs');\nconst Path = require('path');\nconst Matcher = require('./matcher');\nconst jsStringEscape = require('js-string-escape');\n\nfunction mkpathSync(pathname) {\n  if (File.existsSync(pathname)) return;\n  const parent = Path.dirname(pathname);\n  if (File.existsSync(parent)) File.mkdirSync(pathname);else {\n    mkpathSync(parent);\n    File.mkdirSync(pathname);\n  }\n}\n\n// Parse headers from headerLines.  Optional argument `only` is an array of\n// regular expressions; only headers matching one of these expressions are\n// parsed.  Returns a object with name/value pairs.\nfunction parseHeaders(filename, headerLines) {\n  let only = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n  const headers = Object.create(null);\n  for (let line of headerLines) {\n    if (line === '') continue;\n\n    var _line$match$slice = line.match(/^(.*?)\\:\\s+(.*)$/).slice(1);\n\n    var _line$match$slice2 = _slicedToArray(_line$match$slice, 2);\n\n    let name = _line$match$slice2[0];\n    let value = _line$match$slice2[1];\n\n    if (only && !match(name, only)) continue;\n\n    const key = (name || '').toLowerCase();\n    value = (value || '').trim().replace(/^\"(.*)\"$/, '$1');\n    if (Array.isArray(headers[key])) headers[key].push(value);else if (headers[key]) headers[key] = [headers[key], value];else headers[key] = value;\n  }\n  return headers;\n}\n\nfunction parseRequest(filename, request, requestHeaders) {\n  assert(request, `${ filename } missing request section`);\n\n  var _request$split = request.split(/\\n/);\n\n  var _request$split2 = _toArray(_request$split);\n\n  const methodAndPath = _request$split2[0];\n\n  const headerLines = _request$split2.slice(1);\n\n  let method;\n  let path;\n  let rawRegexp;\n  let regexp;\n  if (/\\sREGEXP\\s/.test(methodAndPath)) {\n    var _methodAndPath$split = methodAndPath.split(' REGEXP ');\n\n    var _methodAndPath$split2 = _slicedToArray(_methodAndPath$split, 2);\n\n    method = _methodAndPath$split2[0];\n    rawRegexp = _methodAndPath$split2[1];\n\n    var _rawRegexp$match$slic = rawRegexp.match(/^\\/(.+)\\/(i|m|g)?$/).slice(1);\n\n    var _rawRegexp$match$slic2 = _slicedToArray(_rawRegexp$match$slic, 2);\n\n    const inRegexp = _rawRegexp$match$slic2[0];\n    const flags = _rawRegexp$match$slic2[1];\n\n    regexp = new RegExp(inRegexp, flags || '');\n  } else {\n    ;\n\n    var _methodAndPath$split3 = methodAndPath.split(/\\s/);\n\n    var _methodAndPath$split4 = _slicedToArray(_methodAndPath$split3, 2);\n\n    method = _methodAndPath$split4[0];\n    path = _methodAndPath$split4[1];\n  }assert(method && (path || regexp), `${ filename }: first line must be <method> <path>`);\n  assert(/^[a-zA-Z]+$/.test(method), `${ filename }: method not valid`);\n  const headers = parseHeaders(filename, headerLines, requestHeaders);\n  const body = headers.body;\n  delete headers.body;\n  const url = path || regexp;\n  return { url: url, method: method, headers: headers, body: body };\n}\n\nfunction parseResponse(filename, response, body) {\n  if (response) {\n    var _response$split = response.split(/\\n/);\n\n    var _response$split2 = _toArray(_response$split);\n\n    const statusLine = _response$split2[0];\n\n    const headerLines = _response$split2.slice(1);\n\n    const newFormat = statusLine.match(/HTTP\\/(\\d\\.\\d)\\s+(\\d{3})\\s*(.*)/);\n    const version = newFormat[1];\n    const statusCode = parseInt(newFormat[2], 10);\n    const statusMessage = newFormat[3].trim();\n    const headers = parseHeaders(filename, headerLines);\n    const rawHeaders = headerLines.reduce(function (raw, header) {\n      var _header$split = header.split(/:\\s+/);\n\n      var _header$split2 = _slicedToArray(_header$split, 2);\n\n      const name = _header$split2[0];\n      const value = _header$split2[1];\n\n      raw.push(name);\n      raw.push(value);\n      return raw;\n    }, []);\n    return { statusCode: statusCode, statusMessage: statusMessage, version: version, headers: headers, rawHeaders: rawHeaders, body: body, trailers: {}, rawTrailers: [] };\n  }\n}\n\nfunction readAndInitialParseFile(filename) {\n  const buffer = File.readFileSync(filename);\n  const parts = buffer.toString('utf8').split('\\n\\n');\n  if (parts.length > 2) {\n    const parts0 = new Buffer(parts[0], 'utf8');\n    const parts1 = new Buffer(parts[1], 'utf8');\n    const body = buffer.slice(parts0.length + parts1.length + 4);\n    return [parts[0], parts[1], body];\n  } else return [parts[0], parts[1], ''];\n}\n\n// Write headers to the File object.  Optional argument `only` is an array of\n// regular expressions; only headers matching one of these expressions are\n// written.\nfunction writeHeaders(file, headers) {\n  let only = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n  for (let name in headers) {\n    let value = headers[name];\n    if (only && !match(name, only)) continue;\n    if (Array.isArray(value)) for (let item of value) file.write(`${ name }: ${ item }\\n`);else file.write(`${ name }: ${ value }\\n`);\n  }\n}\n\n// Returns true if header name matches one of the regular expressions.\nfunction match(name, regexps) {\n  for (let regexp of regexps) if (regexp.test(name)) return true;\n  return false;\n}\n\nmodule.exports = class Catalog {\n\n  constructor(settings) {\n    this.settings = settings;\n    // We use this to cache host/host:port mapped to array of matchers.\n    this.matchers = {};\n    this._basedir = Path.resolve('fixtures');\n  }\n\n  getFixturesDir() {\n    return this._basedir;\n  }\n\n  setFixturesDir(dir) {\n    this._basedir = Path.resolve(dir);\n    this.matchers = {};\n  }\n\n  find(host) {\n    // Return result from cache.\n    const matchers = this.matchers[host];\n    if (matchers) return matchers;\n\n    // Start by looking for directory and loading each of the files.\n    // Look for host-port (windows friendly) or host:port (legacy)\n    let pathname = `${ this.getFixturesDir() }/${ host.replace(':', '-') }`;\n    if (!File.existsSync(pathname)) pathname = `${ this.getFixturesDir() }/${ host }`;\n    if (!File.existsSync(pathname)) return null;\n\n    const newMatchers = this.matchers[host] || [];\n    this.matchers[host] = newMatchers;\n\n    const stat = File.statSync(pathname);\n    if (stat.isDirectory()) {\n      const files = File.readdirSync(pathname);\n      for (let file of files) {\n        let mapping = this._read(`${ pathname }/${ file }`);\n        newMatchers.push(Matcher.fromMapping(host, mapping));\n      }\n    } else {\n      const mapping = this._read(pathname);\n      newMatchers.push(Matcher.fromMapping(host, mapping));\n    }\n\n    return newMatchers;\n  }\n\n  save(host, request, response, callback) {\n    const matcher = Matcher.fromMapping(host, { request: request, response: response });\n    const matchers = this.matchers[host] || [];\n    matchers.push(matcher);\n    const requestHeaders = this.settings.headers;\n\n    const uid = `${ Date.now() }${ Math.floor(Math.random() * 100000) }`;\n    const tmpfile = `${ this.getFixturesDir() }/node-replay.${ uid }`;\n    const pathname = `${ this.getFixturesDir() }/${ host.replace(':', '-') }`;\n\n    debug(`Creating ${ pathname }`);\n    try {\n      mkpathSync(pathname);\n    } catch (error) {\n      setImmediate(function () {\n        callback(error);\n      });\n      return;\n    }\n\n    const filename = `${ pathname }/${ uid }`;\n    try {\n      const file = File.createWriteStream(tmpfile, { encoding: 'utf-8' });\n      file.write(`${ request.method.toUpperCase() } ${ request.url.path || '/' }\\n`);\n      writeHeaders(file, request.headers, requestHeaders);\n      if (request.body) {\n        let body = '';\n        for (let chunks of request.body) body += chunks[0];\n        writeHeaders(file, { body: jsStringEscape(body) });\n      }\n      file.write('\\n');\n      // Response part\n      file.write(`HTTP/${ response.version || '1.1' } ${ response.statusCode || 200 } ${ response.statusMessage }\\n`);\n      writeHeaders(file, response.headers);\n      file.write('\\n');\n      for (let part of response.body) file.write(part[0], part[1]);\n      file.end(function () {\n        File.rename(tmpfile, filename, callback);\n      });\n    } catch (error) {\n      callback(error);\n    }\n  }\n\n  _read(filename) {\n    var _readAndInitialParseF = readAndInitialParseFile(filename);\n\n    var _readAndInitialParseF2 = _slicedToArray(_readAndInitialParseF, 3);\n\n    const request = _readAndInitialParseF2[0];\n    const response = _readAndInitialParseF2[1];\n    const part = _readAndInitialParseF2[2];\n\n    const body = [[part, undefined]];\n    return {\n      request: parseRequest(filename, request, this.settings.headers),\n      response: parseResponse(filename, response, body)\n    };\n  }\n\n};\n//# sourceMappingURL=catalog.js.map\n","/home/travis/build/npmtest/node-npmtest-replay/node_modules/replay/lib/debug.js":"'use strict';\n\nmodule.exports = require('debug')('replay');\n//# sourceMappingURL=debug.js.map\n","/home/travis/build/npmtest/node-npmtest-replay/node_modules/replay/lib/matcher.js":"'use strict';\n\n// A matcher is a function that, given a request, returns an appropriate response or nothing.\n//\n// The most common use case is to calling `Matcher.fromMapping(mapping)`.\n//\n// The request consists of:\n// url     - URL object\n// method  - Request method (lower case)\n// headers - Headers object (names are lower case)\n// body    - Request body (for some requests)\n//\n// The response consists of:\n// version   - HTTP version\n// status    - Status code\n// headers   - Headers object (names are lower case)\n// body      - Array of body parts\n// trailers  - Trailers object (names are lower case)\n\n\nconst assert = require('assert');\nconst URL = require('url');\nconst jsStringEscape = require('js-string-escape');\n\n// Simple implementation of a matcher.\n//\n// To create a matcher from request/response mapping use `fromMapping`.\nmodule.exports = class Matcher {\n\n  constructor(request, response) {\n    // Map requests to object properties.  We do this for quick matching.\n    assert(request.url || request.regexp, 'I need at least a URL to match request to response');\n    if (request.regexp) {\n      this.hostname = request.hostname;\n      this.regexp = request.regexp;\n    } else {\n      const url = URL.parse(request.url);\n      this.hostname = url.hostname;\n      this.port = url.port;\n      this.path = url.path;\n    }\n\n    this.method = request.method && request.method.toUpperCase() || 'GET';\n    this.headers = {};\n    if (request.headers) for (let name in request.headers) {\n      let value = request.headers[name];\n      this.headers[name.toLowerCase()] = value;\n    }\n    this.body = request.body;\n\n    // Create a normalized response object that we return.\n    this.response = {\n      version: response.version || '1.1',\n      statusCode: response.statusCode && parseInt(response.statusCode, 10) || 200,\n      statusMessage: response.statusMessage || '',\n      headers: {},\n      body: response.body ? response.body.slice(0) : [],\n      trailers: {}\n    };\n\n    // Copy over header to response, downcase header names.\n    if (response.headers) {\n      const headers = this.response.headers;\n      for (let name in response.headers) {\n        let value = response.headers[name];\n        headers[name.toLowerCase()] = value;\n      }\n    }\n    // Copy over trailers to response, downcase trailers names.\n    if (response.trailers) {\n      const trailers = this.response.trailers;\n      for (let name in response.trailers) {\n        let value = response.trailers[name];\n        trailers[name.toLowerCase()] = value;\n      }\n    }\n  }\n\n  // Quick and effective matching.\n  match(request) {\n    const url = request.url;\n    const method = request.method;\n    const headers = request.headers;\n    const body = request.body;\n\n    if (this.hostname && this.hostname !== url.hostname) return false;\n    if (this.regexp) {\n      if (!this.regexp.test(url.path)) return false;\n    } else {\n      if (this.port && this.port !== url.port) return false;\n      if (this.path && this.path !== url.path) return false;\n    }\n    if (this.method !== method) return false;\n\n    for (let name in this.headers) {\n      if (this.headers[name] !== headers[name]) return false;\n    }\n    if (body) {\n      let data = '';\n      for (let chunks of body) data += chunks[0];\n      data = jsStringEscape(data);\n      if (this.body && this.body !== data) return false;\n    }\n    return true;\n  }\n\n  // Returns new matcher function based on the supplied mapping.\n  //\n  // Mapping can contain `request` and `response` object.  As shortcut, mapping can specify `path` and `method` (optional)\n  // directly, and also any of the response properties.\n  static fromMapping(host, mapping) {\n    assert(!!mapping.path ^ !!mapping.request, 'Mapping must specify path or request object');\n\n    let matchingRequest;\n    if (mapping.path) matchingRequest = {\n      url: URL.resolve(`http://${ host }/`, mapping.path),\n      method: mapping.method\n    };else if (mapping.request.url instanceof RegExp) matchingRequest = {\n      host: host,\n      regexp: mapping.request.url,\n      method: mapping.request.method,\n      headers: mapping.request.headers,\n      body: mapping.request.body\n    };else matchingRequest = {\n      url: URL.resolve(`http://${ host }`, mapping.request.url),\n      method: mapping.request.method,\n      headers: mapping.request.headers,\n      body: mapping.request.body\n    };\n\n    const matcher = new Matcher(matchingRequest, mapping.response || {});\n    return function (request) {\n      if (matcher.match(request)) return matcher.response;\n    };\n  }\n\n};\n//# sourceMappingURL=matcher.js.map\n","/home/travis/build/npmtest/node-npmtest-replay/node_modules/replay/lib/chain.js":"\"use strict\";\n\n// Processing chain: pass each request through a list of handlers\n//\n// Each handler called with ClientRequest object and must pass control to\n// callback with either error, ServerResponse object, or no arguments to pass\n// control to the next handler.\n\nmodule.exports = class Chain {\n\n  constructor() {\n    // Linked list of handlers; each handler has a reference to the next one\n    this.first = null;\n    this.last = null;\n  }\n\n  // Appends a handler to the chain (invoked before all other handlers)\n  append(handler) {\n    const layer = this._wrap(handler);\n    this.first = this.first || layer;\n    if (this.last) this.last.next = layer;\n    this.last = layer;\n    return this;\n  }\n\n  // Prepends a handler to the chain (invoked after all other handlers)\n  prepend(handler) {\n    const layer = this._wrap(handler);\n    layer.next = this.first;\n    this.first = layer;\n    this.last = this.last || layer;\n    return this;\n  }\n\n  // Clears the chain of all its handlers\n  clear() {\n    this.first = this.last = null;\n  }\n\n  // Returns the first handler in the chain\n  get start() {\n    return this.first;\n  }\n\n  // Wraps a handler and returns a function that will invoke this handler, and\n  // if the handler does not return a response, pass control to the next handler\n  // in the chain\n  _wrap(handler) {\n    function layer(request, callback) {\n      handler(request, function (error, response) {\n        if (error || response) callback(error, response);else if (layer.next) layer.next(request, callback);else callback();\n      });\n    }\n    return layer;\n  }\n\n};\n//# sourceMappingURL=chain.js.map\n","/home/travis/build/npmtest/node-npmtest-replay/node_modules/replay/lib/logger.js":"'use strict';\n\n// Request handler that logs all request to the console when DEBUG=reply\n\nconst debug = require('./debug');\nconst URL = require('url');\n\nmodule.exports = function logger() {\n  return function (request, callback) {\n    debug(`Requesting ${ request.method } ${ URL.format(request.url) }`);\n    request.on('response', function (response) {\n      debug(`Received ${ response.statusCode } ${ URL.format(request.url) }`);\n    });\n    request.on('error', function (error) {\n      debug(`Error ${ error }`);\n    });\n    callback();\n  };\n};\n//# sourceMappingURL=logger.js.map\n","/home/travis/build/npmtest/node-npmtest-replay/node_modules/replay/lib/pass_through.js":"'use strict';\n\nconst HTTP = require('http');\n\nconst ClientRequest = HTTP.ClientRequest;\n\nmodule.exports = function passThrough(passThroughFunction) {\n  if (arguments.length === 0) passThroughFunction = () => true;else if (typeof passThrough === 'string') {\n    const hostname = passThroughFunction;\n    passThroughFunction = request => request.hostname === hostname;\n  } else if (typeof passThroughFunction !== 'function') {\n    const truthy = !!passThroughFunction;\n    passThroughFunction = () => truthy;\n  }\n\n  return function (request, callback) {\n    if (passThroughFunction(request)) {\n      const options = {\n        protocol: request.url.protocol,\n        hostname: request.url.hostname,\n        port: request.url.port,\n        path: request.url.path,\n        method: request.method,\n        headers: request.headers,\n        agent: request.agent,\n        auth: request.auth\n      };\n\n      const http = new ClientRequest(options);\n      if (request.trailers) http.addTrailers(request.trailers);\n      http.on('error', callback);\n      http.on('response', function (response) {\n        const captured = {\n          version: response.httpVersion,\n          statusCode: response.statusCode,\n          statusMessage: response.statusMessage,\n          headers: response.headers,\n          rawHeaders: response.rawHeaders,\n          body: []\n        };\n        response.on('data', function (chunk, encoding) {\n          captured.body.push([chunk, encoding]);\n        });\n        response.on('end', function () {\n          captured.trailers = response.trailers;\n          captured.rawTrailers = response.rawTrailers;\n          callback(null, captured);\n        });\n      });\n\n      if (request.body) for (let part of request.body) http.write(part[0], part[1]);\n      http.end();\n    } else callback();\n  };\n};\n//# sourceMappingURL=pass_through.js.map\n","/home/travis/build/npmtest/node-npmtest-replay/node_modules/replay/lib/recorder.js":"'use strict';\n\nconst passThrough = require('./pass_through');\n\nmodule.exports = function recorded(settings) {\n  const catalog = settings.catalog;\n\n  const capture = passThrough(true);\n\n  return function (request, callback) {\n    let host = request.url.hostname;\n    if (request.url.port && request.url.port !== '80') host = `${ host }:${ request.url.port }`;\n\n    // Look for a matching response and replay it.\n    try {\n      const matchers = catalog.find(host);\n      if (matchers) for (let matcher of matchers) {\n        let response = matcher(request);\n        if (response) {\n          callback(null, response);\n          return;\n        }\n      }\n    } catch (error) {\n      error.code = 'CORRUPT FIXTURE';\n      error.syscall = 'connect';\n      callback(error);\n      return;\n    }\n\n    // Do not record this host.\n    if (settings.isDropped(request.url.hostname)) {\n      const refused = new Error('Error: connect ECONNREFUSED');\n      refused.code = refused.errno = 'ECONNREFUSED';\n      refused.syscall = 'connect';\n      callback(refused);\n      return;\n    }\n\n    // In recording mode capture the response and store it.\n    if (settings.mode === 'record') {\n      capture(request, function (error, response) {\n        if (error) callback(error);else catalog.save(host, request, response, function (saveError) {\n          callback(saveError, response);\n        });\n      });\n      return;\n    }\n\n    // Not in recording mode, pass control to the next proxy.\n    callback();\n  };\n};\n//# sourceMappingURL=recorder.js.map\n","/home/travis/build/npmtest/node-npmtest-replay/node_modules/replay/Gulpfile.js":"const assert      = require('assert');\nconst del         = require('del');\nconst eslint      = require('gulp-eslint');\nconst exec        = require('gulp-exec');\nconst File        = require('fs');\nconst gulp        = require('gulp');\nconst gutil       = require('gulp-util');\nconst notify      = require('gulp-notify');\nconst sourcemaps  = require('gulp-sourcemaps');\nconst babel       = require('gulp-babel');\n\n\n// gulp -> gulp watch\ngulp.task('default', ['watch']);\n\n\n// gulp lint -> errors if code dirty\ngulp.task('lint', function () {\n  return gulp.src([ 'js/**/*.js', 'test/*.js' ])\n    .pipe(eslint())\n    .pipe(eslint.formatEach())\n    .pipe(eslint.failOnError());\n});\n\n\n// gulp build -> compile coffee script\ngulp.task('build', ['clean', 'lint'], function() {\n  return gulp\n    .src('src/**/*.js')\n    .pipe(sourcemaps.init())\n    .pipe(babel())\n    .pipe(sourcemaps.write('.'))\n    .pipe(gulp.dest('lib'))\n    .pipe(notify({\n      message: 'Zombie: built!',\n      onLast:  true\n    }));\n});\n\n\n// gulp clean -> clean generated files\ngulp.task('clean', function(done) {\n  return del(['lib']);\n});\n\n\n// gulp watch -> watch for changes and compile\ngulp.task('watch', ['build'], function() {\n  return gulp.watch('src/*.js', ['clean', 'build']);\n});\n\n\n// gulp tag -> Tag this release\ngulp.task('tag', ['changes'], function() {\n  const version = require('./package.json').version;\n  const tag     = 'v' + version;\n\n  gutil.log('Tagging this release', tag);\n  return gulp.src('.changes')\n    .pipe( exec('git add package.json CHANGELOG.md') )\n    .pipe( exec('git commit --allow-empty -m \"Version ' + version + '\"') )\n    .pipe( exec('git tag ' + tag + ' --file .changes') )\n    .pipe( exec('git push origin ' + tag) )\n    .pipe( exec('git push origin master') );\n});\n\n// Generate a change log summary for this release\n// git tag uses the generated .changes file\ngulp.task('changes', function() {\n  const version   = require('./package.json').version;\n  const changelog = File.readFileSync('CHANGELOG.md', 'utf-8');\n  const match     = changelog.match(/^## Version (.*) .*\\n([\\S\\s]+?)\\n##/m);\n\n  assert(match, 'CHANGELOG.md missing entry: ## Version ' + version);\n  assert.equal(match[1], version, 'CHANGELOG.md missing entry for version ' + version);\n\n  const changes   = match[2].trim();\n  assert(changes, 'CHANGELOG.md empty entry for version ' + version);\n  File.writeFileSync('.changes', changes);\n});\n\n\n"}